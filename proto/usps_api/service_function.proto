// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
syntax = "proto2";

package ghost;

option cc_enable_arenas = true;

// A message representing a Service Function to encrypt/decrypt the packet.
message CipherServiceFn {
  // Required.
  // Cipher protocol.
  enum CipherProtocol {
    CIPHER_UNSPECIFIED = 0;
    CIPHER_NULL = 1;
    CIPHER_CCMP_AES = 2;  // RFC 3601
    CIPHER_AES_GCM = 3;
    CIPHER_AES_CBC = 4;  // RFC 3602
    CIPHER_AES_CTR = 5;
    CIPHER_AES_EAX = 6;
  }
  optional CipherProtocol cipher_protocol = 1;

  // Optional.
  // For block-ciphers, size of the block to use, in bytes.
  optional uint32 block_size_bytes = 2 [default = 16];

  // Required.
  // Key to use for encryption.
  optional bytes key = 3;

  // Optional.
  // AES-GCM specific (when CipherProtocol is CIPHER_AES_GCM).
  optional bytes salt = 4;

  // Optional.
  // 4-bit identifier for encryption key.
  optional uint32 keyid = 5;

  // Optional.
  // 4-bit version for encryption trailer.
  optional uint32 version = 6;

  // Required.
  // Encrypt or decrypt.
  enum CipherType {
    CIPHER_TYPE_UNSPECIFIED = 0;
    ENCRYPT = 1;
    DECRYPT = 2;
  }
  optional CipherType cipher_type = 7;
}

message IpEncapsulationServiceFn {
  // Required.
  optional string source_address = 1;

  // Required.
  optional string destination_address = 2;

  // Optional.
  // Protocol/Next Header (8-bit field). Defaults to IPPROTO_RAW. If there is a
  // preceding encap, that protocol is used instead of this. For example, if UDP
  // encap precedes IP encap, the protocol would be IPPROTO_UDP (17) instead of
  // whatever value is in this field. So this field is used only when IP encap
  // is the highest/innermost encap layer.
  optional uint32 protocol = 3;
}

message UdpEncapsulationServiceFn {
  // Required.
  optional uint32 source_port = 1;

  // Required.
  optional uint32 destination_port = 2;
}

// UDP encapsulation on top of an existing GhOST header. The source port of the
// UDP header is randomized based on the GhOST header.
message GhostUdpEncapsulationServiceFn {
  // Required.
  // |destination_port_low| needs to be less than or equal to
  // |destination_port_high|.
  //
  // The two fields specify the destination port range which is
  // [|destination_port_low|, |destination_port_high|], i.e., the
  // |destination_port_high| value is part of the range. If
  // |destination_port_low| == |destination_port_high|, it represents the single
  // value of |destination_port_low|.
  optional uint32 destination_port_low = 1;
  optional uint32 destination_port_high = 2;

  // Required.
  optional uint32 source_port = 3;
}

// Function to encapsulate packets at different layers.
message PacketEncapsulationServiceFn {
  // Required.
  oneof encap {
    IpEncapsulationServiceFn ip_encap = 1;
    UdpEncapsulationServiceFn udp_encap = 2;
    GhostUdpEncapsulationServiceFn ghost_udp_encap = 3;
  }
}

// Encapsulates packets and sends them out.
message EncapAndTxServiceFn {
  // Required.
  // One or more packet encapsulations to apply. Encapsulations are applied in
  // the order specified - the first encapsulation becomes innermost one, and
  // the last is the outermost (towards the beginning of the packet).
  repeated PacketEncapsulationServiceFn encaps = 1;
}

// Duplicates packets, separately encapsulates the originals and duplicates, and
// sends them out. Note that only bi-casting is supported at this moment.
message DupEncapAndTxServiceFn {
  // Required.
  repeated EncapAndTxServiceFn dups = 1;
}

message EthernetDecapsulationServiceFn {}

message IpDecapsulationServiceFn {}

message GreDecapsulationServiceFn {}

message UdpDecapsulationServiceFn {}

// Function to decapsulate packets at different layers.
message PacketDecapsulationServiceFn {
  // Required.
  oneof decap {
    EthernetDecapsulationServiceFn ethernet_decap = 1;
    IpDecapsulationServiceFn ip_decap = 2;
    GreDecapsulationServiceFn gre_decap = 3;
    UdpDecapsulationServiceFn udp_decap = 4;
  }
}

// Decapsulates packets.
message DecapServiceFn {
  // Required.
  // One or more encapsulations to remove. The encapsulations are removed in the
  // order specified. The first encapsulation to remove is the outermost one
  // (towards the beginning of the packet), and the last is the innermost one.
  repeated PacketDecapsulationServiceFn decaps = 1;
}

// Increments counters.
message IncrementCounterServiceFn {}

// Service functions to be applied to the traffic in the service function chain.
message ServiceFn {
  // Required.
  oneof service_fn_type {
    CipherServiceFn cipher = 1;
    EncapAndTxServiceFn encap_and_tx = 2;
    DupEncapAndTxServiceFn dup_encap_and_tx = 3;
    DecapServiceFn decap = 4;
    IncrementCounterServiceFn increment_counter = 5;
  }
}
